// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// Get_Power_UMP
NumericVector Get_Power_UMP(NumericVector tau_pool, NumericVector eg_values, NumericVector CriVals);
RcppExport SEXP _MORST_Get_Power_UMP(SEXP tau_poolSEXP, SEXP eg_valuesSEXP, SEXP CriValsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type tau_pool(tau_poolSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type eg_values(eg_valuesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CriVals(CriValsSEXP);
    rcpp_result_gen = Rcpp::wrap(Get_Power_UMP(tau_pool, eg_values, CriVals));
    return rcpp_result_gen;
END_RCPP
}
// Power_fixed_tau
NumericVector Power_fixed_tau(NumericVector tau_pool, NumericVector eg_values, double tau0, double CV_tau0);
RcppExport SEXP _MORST_Power_fixed_tau(SEXP tau_poolSEXP, SEXP eg_valuesSEXP, SEXP tau0SEXP, SEXP CV_tau0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type tau_pool(tau_poolSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type eg_values(eg_valuesSEXP);
    Rcpp::traits::input_parameter< double >::type tau0(tau0SEXP);
    Rcpp::traits::input_parameter< double >::type CV_tau0(CV_tau0SEXP);
    rcpp_result_gen = Rcpp::wrap(Power_fixed_tau(tau_pool, eg_values, tau0, CV_tau0));
    return rcpp_result_gen;
END_RCPP
}
// davies_adaptive
double davies_adaptive(double Q, NumericVector w, bool is_small);
RcppExport SEXP _MORST_davies_adaptive(SEXP QSEXP, SEXP wSEXP, SEXP is_smallSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type Q(QSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type is_small(is_smallSEXP);
    rcpp_result_gen = Rcpp::wrap(davies_adaptive(Q, w, is_small));
    return rcpp_result_gen;
END_RCPP
}
// Get_CriVals
NumericVector Get_CriVals(NumericVector tau_pool, NumericVector eg_values, double alpha);
RcppExport SEXP _MORST_Get_CriVals(SEXP tau_poolSEXP, SEXP eg_valuesSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type tau_pool(tau_poolSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type eg_values(eg_valuesSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(Get_CriVals(tau_pool, eg_values, alpha));
    return rcpp_result_gen;
END_RCPP
}
// Davies
List Davies(double q, NumericVector lambda, int lim, double acc);
RcppExport SEXP _MORST_Davies(SEXP qSEXP, SEXP lambdaSEXP, SEXP limSEXP, SEXP accSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type lim(limSEXP);
    Rcpp::traits::input_parameter< double >::type acc(accSEXP);
    rcpp_result_gen = Rcpp::wrap(Davies(q, lambda, lim, acc));
    return rcpp_result_gen;
END_RCPP
}
// which_abs_diff_min
int which_abs_diff_min(NumericVector Power_UMP, double power_x);
RcppExport SEXP _MORST_which_abs_diff_min(SEXP Power_UMPSEXP, SEXP power_xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Power_UMP(Power_UMPSEXP);
    Rcpp::traits::input_parameter< double >::type power_x(power_xSEXP);
    rcpp_result_gen = Rcpp::wrap(which_abs_diff_min(Power_UMP, power_x));
    return rcpp_result_gen;
END_RCPP
}
// Minimax_tau
NumericVector Minimax_tau(NumericVector eg_values, double alpha, int n_points);
RcppExport SEXP _MORST_Minimax_tau(SEXP eg_valuesSEXP, SEXP alphaSEXP, SEXP n_pointsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type eg_values(eg_valuesSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type n_points(n_pointsSEXP);
    rcpp_result_gen = Rcpp::wrap(Minimax_tau(eg_values, alpha, n_points));
    return rcpp_result_gen;
END_RCPP
}
// Saddle
double Saddle(double q, NumericVector egvalues);
RcppExport SEXP _MORST_Saddle(SEXP qSEXP, SEXP egvaluesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type egvalues(egvaluesSEXP);
    rcpp_result_gen = Rcpp::wrap(Saddle(q, egvalues));
    return rcpp_result_gen;
END_RCPP
}
// tau_ump
double tau_ump(NumericVector Eg_values, double target_power, double siglevel, double acc_power, double acc_siglevel);
RcppExport SEXP _MORST_tau_ump(SEXP Eg_valuesSEXP, SEXP target_powerSEXP, SEXP siglevelSEXP, SEXP acc_powerSEXP, SEXP acc_siglevelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Eg_values(Eg_valuesSEXP);
    Rcpp::traits::input_parameter< double >::type target_power(target_powerSEXP);
    Rcpp::traits::input_parameter< double >::type siglevel(siglevelSEXP);
    Rcpp::traits::input_parameter< double >::type acc_power(acc_powerSEXP);
    Rcpp::traits::input_parameter< double >::type acc_siglevel(acc_siglevelSEXP);
    rcpp_result_gen = Rcpp::wrap(tau_ump(Eg_values, target_power, siglevel, acc_power, acc_siglevel));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MORST_Get_Power_UMP", (DL_FUNC) &_MORST_Get_Power_UMP, 3},
    {"_MORST_Power_fixed_tau", (DL_FUNC) &_MORST_Power_fixed_tau, 4},
    {"_MORST_davies_adaptive", (DL_FUNC) &_MORST_davies_adaptive, 3},
    {"_MORST_Get_CriVals", (DL_FUNC) &_MORST_Get_CriVals, 3},
    {"_MORST_Davies", (DL_FUNC) &_MORST_Davies, 4},
    {"_MORST_which_abs_diff_min", (DL_FUNC) &_MORST_which_abs_diff_min, 2},
    {"_MORST_Minimax_tau", (DL_FUNC) &_MORST_Minimax_tau, 3},
    {"_MORST_Saddle", (DL_FUNC) &_MORST_Saddle, 2},
    {"_MORST_tau_ump", (DL_FUNC) &_MORST_tau_ump, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_MORST(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
